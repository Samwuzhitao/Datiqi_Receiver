<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Hex\Datiqi_Receiver_V1003.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Hex\Datiqi_Receiver_V1003.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Aug 26 11:47:44 2016
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; app_handle_layer &rArr; FindICCard &rArr; PcdSelect2 &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[38]">fputc</a> from init.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[35]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[39]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[155]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[15c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[15d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[15e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[15f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10e]"></a>GenerateSystemReset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72 &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[160]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_USART2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_USART1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_RFIRQ
</UL>

<P><STRONG><a name="[6a]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_USART2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_USART1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_RFIRQ
</UL>

<P><STRONG><a name="[161]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF21
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF1
</UL>

<P><STRONG><a name="[165]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[49]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[66]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_ShuaiJianQi
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF21
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_BEEP
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_SE2431L
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_MFRC500
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC500_DATA_Port_config_output
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC500_DATA_Port_config_input
</UL>

<P><STRONG><a name="[16a]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[16c]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_ShuaiJianQi
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE2431L_TX
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE2431L_LNA
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF21
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE2431L_Bypass
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzze_Control
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE2431L_LNA
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE2431L_Bypass
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzze_Control
</UL>

<P><STRONG><a name="[67]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_MFRC500
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[16d]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_MFRC500
</UL>

<P><STRONG><a name="[82]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF21
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF1
</UL>

<P><STRONG><a name="[170]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[5c]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[5d]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[5e]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5f]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[171]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[172]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[4a]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[173]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[42]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[43]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[44]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[45]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[3f]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[41]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[40]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>

<P><STRONG><a name="[174]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[58]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[56]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[57]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[48]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[4c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[17b]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[17c]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[84]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF21
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF1
</UL>

<P><STRONG><a name="[4d]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[180]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF21
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF2
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF1
</UL>

<P><STRONG><a name="[182]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>

<P><STRONG><a name="[ad]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>

<P><STRONG><a name="[185]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>

<P><STRONG><a name="[18d]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[50]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
</UL>

<P><STRONG><a name="[190]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
</UL>

<P><STRONG><a name="[70]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrUartSendTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_USART2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_USART1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrUartSendTask
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a3]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; app_handle_layer &rArr; FindICCard &rArr; PcdSelect2 &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_handle_layer
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Module_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[55]"></a>RCC_Configuration</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCC_Configuration &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72 &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[5a]"></a>IWDG_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
</UL>

<P><STRONG><a name="[1a5]"></a>Delay2us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>Delay3us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[d0]"></a>Delay10us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[61]"></a>Delay1Ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay1Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24SendPacket
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1s
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100Ms
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10Ms
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Module_Set
</UL>

<P><STRONG><a name="[60]"></a>Delay10Ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
</UL>

<P><STRONG><a name="[62]"></a>Delay100Ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay100Ms &rArr; Delay1Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[63]"></a>Delay1s</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
</UL>

<P><STRONG><a name="[78]"></a>GetMcuid</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[77]"></a>ledOff</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[76]"></a>ledOn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[64]"></a>GPIOInit_MFRC500</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOInit_MFRC500 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[68]"></a>NVIC_Configuration_RFIRQ</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration_RFIRQ &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[6b]"></a>SE2431L_Bypass</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SE2431L_Bypass
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_SE2431L
</UL>

<P><STRONG><a name="[6e]"></a>GPIOInit_SE2431L</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOInit_SE2431L &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE2431L_Bypass
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[6f]"></a>NVIC_Configuration_USART1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration_USART1 &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[71]"></a>Usart1_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Usart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[73]"></a>GPIOInit_BEEP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIOInit_BEEP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[74]"></a>ledInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ledInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[51]"></a>Platform_Init</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Platform_Init &rArr; Usart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_BEEP
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_USART1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_SE2431L
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration_RFIRQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit_MFRC500
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOn
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOff
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMcuid
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100Ms
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>ledToggle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>Usart2_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[7c]"></a>NVIC_Configuration_USART2</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>

<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[7f]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>

<P><STRONG><a name="[81]"></a>SPI_Init_NRF1</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Init_NRF1 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Module_Set
</UL>

<P><STRONG><a name="[86]"></a>SPI_Init_NRF2</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[87]"></a>SPI_Init_NRF21</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[88]"></a>SE2431L_LNA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[89]"></a>SE2431L_TX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[8a]"></a>GPIOInit_ShuaiJianQi</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[8b]"></a>hal_uart_clr_tx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_uart_clr_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>hal_uart_clr_rx</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hal_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_from_pos
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8d]"></a>CtrUartSendTask</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[8f]"></a>app_debuglog_dump</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_debuglog_dump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNDEFfile
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_RF_config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pos
</UL>

<P><STRONG><a name="[90]"></a>app_debuglog_dump_no_space</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[111]"></a>XOR_Cal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, misc_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnInsertState
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnDeleteState
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnInitializeState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnWhiteListSwitchState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnAttendanceSwitchState
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnMatchSwitchState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnErr
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>Crc16Cal</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, misc_func.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>nrf24AllRegResetVal_nrf1</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf24AllRegResetVal_nrf1 &rArr; hal_nrf_set_power_mode &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_power_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_tx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[96]"></a>nrf24InitConf_NRF1</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf24InitConf_NRF1 &rArr; hal_nrf_set_address &rArr; hal_nrf_get_address_width &rArr; hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_setup_dynamic_payload
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_rf_channel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_power_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_output_power
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_operation_mode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_datarate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_crc_mode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_auto_retr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_address_width
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_address
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_open_pipe
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_clear_irq_flags
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_tx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_rx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_dynamic_payload
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_dynamic_ack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_ack_payload
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AllRegResetVal_nrf1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Module_Set
</UL>

<P><STRONG><a name="[52]"></a>NRF_Module_Set</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NRF_Module_Set &rArr; nrf24InitConf_NRF1 &rArr; hal_nrf_set_address &rArr; hal_nrf_get_address_width &rArr; hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init_NRF1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>nrf24AddtoAck</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf24AddtoAck &rArr; hal_nrf_write_multibyte_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_tx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>nrf24SendPacket</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_nop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
</UL>

<P><STRONG><a name="[aa]"></a>hal_nrf_rw</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_reuse_tx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_multibyte_reg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_nop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_tx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_rx
</UL>

<P><STRONG><a name="[95]"></a>hal_nrf_write_reg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_rx_payload_width
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_close_pipe
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_clear_irq_flag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_irq_mode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_setup_dynamic_payload
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_rf_channel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_power_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_output_power
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_operation_mode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_datarate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_crc_mode
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_auto_retr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_address_width
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_address
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_open_pipe
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_clear_irq_flags
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_dynamic_payload
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_dynamic_ack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_ack_payload
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24SendPacket
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AllRegResetVal_nrf1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Module_Set
</UL>

<P><STRONG><a name="[a6]"></a>hal_nrf_read_reg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_carrier_detect
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_transmit_attempts
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_fifo_status
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_rx_fifo_status
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_tx_fifo_status
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_tx_fifo_full
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_tx_fifo_empty
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rx_fifo_full
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_rx_payload_width
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_packet_lost_ctr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_auto_retr_status
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_pipe_status
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_address
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_rx_payload_width
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_address_width
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_close_pipe
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_irq_mode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_power_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_output_power
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_operation_mode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_datarate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_crc_mode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_open_pipe
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_dynamic_payload
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_dynamic_ack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_enable_ack_payload
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Module_Set
</UL>

<P><STRONG><a name="[a5]"></a>hal_nrf_set_operation_mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_operation_mode &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[92]"></a>hal_nrf_set_power_mode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_power_mode &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AllRegResetVal_nrf1
</UL>

<P><STRONG><a name="[a1]"></a>hal_nrf_set_crc_mode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_crc_mode &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[ae]"></a>hal_nrf_set_irq_mode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[a4]"></a>hal_nrf_get_clear_irq_flags</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_nrf_get_clear_irq_flags &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>hal_nrf_clear_irq_flag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
</UL>

<P><STRONG><a name="[a9]"></a>hal_nrf_nop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nrf_nop &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_rx_data_source
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_irq_flags
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24SendPacket
</UL>

<P><STRONG><a name="[b0]"></a>hal_nrf_get_irq_flags</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_nrf_get_irq_flags &rArr; hal_nrf_nop &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>hal_nrf_open_pipe</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_nrf_open_pipe &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[b1]"></a>hal_nrf_close_pipe</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[b2]"></a>hal_nrf_get_address_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_nrf_get_address_width &rArr; hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_multibyte_reg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_address
</UL>

<P><STRONG><a name="[a3]"></a>hal_nrf_write_multibyte_reg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_nrf_write_multibyte_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_ack_payload
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_tx_payload_noack
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_tx_payload
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_set_address
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24SendPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AddtoAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[9f]"></a>hal_nrf_set_address</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_nrf_set_address &rArr; hal_nrf_get_address_width &rArr; hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_address_width
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[b3]"></a>hal_nrf_read_rx_payload_width</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_nrf_read_rx_payload_width &rArr; hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_multibyte_reg
</UL>

<P><STRONG><a name="[b4]"></a>hal_nrf_get_rx_data_source</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_nrf_get_rx_data_source &rArr; hal_nrf_nop &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rx_fifo_empty
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_multibyte_reg
</UL>

<P><STRONG><a name="[b5]"></a>hal_nrf_read_multibyte_reg</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_nrf_read_multibyte_reg &rArr; hal_nrf_read_rx_payload_width &rArr; hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_rx_data_source
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_rx_payload_width
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_address_width
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_rx_payload
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_address
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>hal_nrf_get_address</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_multibyte_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[a2]"></a>hal_nrf_set_auto_retr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_auto_retr &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[9e]"></a>hal_nrf_set_address_width</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_address_width &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[b7]"></a>hal_nrf_set_rx_payload_width</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
</UL>

<P><STRONG><a name="[b8]"></a>hal_nrf_get_pipe_status</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[b9]"></a>hal_nrf_get_auto_retr_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[ba]"></a>hal_nrf_get_packet_lost_ctr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[bb]"></a>hal_nrf_get_rx_payload_width</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[9d]"></a>hal_nrf_set_rf_channel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_rf_channel &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[9c]"></a>hal_nrf_set_output_power</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_output_power &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[9b]"></a>hal_nrf_set_datarate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_set_datarate &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[bc]"></a>hal_nrf_rx_fifo_empty</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_rx_data_source
</UL>

<P><STRONG><a name="[bd]"></a>hal_nrf_rx_fifo_full</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[be]"></a>hal_nrf_tx_fifo_empty</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[bf]"></a>hal_nrf_tx_fifo_full</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[c0]"></a>hal_nrf_get_tx_fifo_status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[c1]"></a>hal_nrf_get_rx_fifo_status</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[c2]"></a>hal_nrf_get_fifo_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_reuse_tx_status
</UL>

<P><STRONG><a name="[c3]"></a>hal_nrf_get_transmit_attempts</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[c4]"></a>hal_nrf_get_carrier_detect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>

<P><STRONG><a name="[9a]"></a>hal_nrf_setup_dynamic_payload</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_setup_dynamic_payload &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[99]"></a>hal_nrf_enable_dynamic_payload</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_enable_dynamic_payload &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[98]"></a>hal_nrf_enable_ack_payload</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_enable_ack_payload &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[97]"></a>hal_nrf_enable_dynamic_ack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_nrf_enable_dynamic_ack &rArr; hal_nrf_write_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
</UL>

<P><STRONG><a name="[c5]"></a>hal_nrf_write_tx_payload</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
</UL>

<P><STRONG><a name="[c6]"></a>hal_nrf_write_tx_payload_noack</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
</UL>

<P><STRONG><a name="[c7]"></a>hal_nrf_write_ack_payload</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_write_multibyte_reg
</UL>

<P><STRONG><a name="[c8]"></a>hal_nrf_read_rx_payload</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_multibyte_reg
</UL>

<P><STRONG><a name="[c9]"></a>hal_nrf_reuse_tx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>

<P><STRONG><a name="[ca]"></a>hal_nrf_get_reuse_tx_status</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_nrf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_fifo_status
</UL>

<P><STRONG><a name="[93]"></a>hal_nrf_flush_rx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nrf_flush_rx &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AddtoAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AllRegResetVal_nrf1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>hal_nrf_flush_tx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_nrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_nrf_flush_tx &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AddtoAck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AllRegResetVal_nrf1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>MFRC500_DATA_Port_config_input</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MFRC500_DATA_Port_config_input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[cc]"></a>MFRC500_DATA_Port_config_output</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>

<P><STRONG><a name="[cd]"></a>ReadRC</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10us
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay3us
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC500_DATA_Port_config_output
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC500_DATA_Port_config_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>

<P><STRONG><a name="[d3]"></a>WriteRC</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteRC
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10us
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdAnticoll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>

<P><STRONG><a name="[7a]"></a>PcdAntennaOff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PcdAntennaOff &rArr; ClearBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdAntenna
</UL>

<P><STRONG><a name="[d8]"></a>PcdAntennaOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PcdAntennaOn &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdAntenna
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[75]"></a>PcdReset</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PcdReset &rArr; PcdAntennaOff &rArr; ClearBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay10us
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
</UL>

<P><STRONG><a name="[d9]"></a>PcdRequest</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdRequest &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRequestA
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTypeARst
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[da]"></a>PcdAnticoll</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PcdAnticoll &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAnticoll
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAnticol2
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTypeARst
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[db]"></a>PcdSelect</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>

<P><STRONG><a name="[dc]"></a>PcdSelect1</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PcdSelect1 &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTypeARst
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[dd]"></a>PcdSelect2</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PcdSelect2 &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[de]"></a>PcdHalt</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdHalt &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_RF_config
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHlta
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
</UL>

<P><STRONG><a name="[13d]"></a>ChangeCodeKey</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAuthentication
</UL>

<P><STRONG><a name="[df]"></a>PcdAuthKey</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAuthentication
</UL>

<P><STRONG><a name="[e0]"></a>PcdAuthState</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAuthentication
</UL>

<P><STRONG><a name="[e1]"></a>PcdRead</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Readval
</UL>

<P><STRONG><a name="[e2]"></a>PcdWrite</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Initval
</UL>

<P><STRONG><a name="[e3]"></a>PcdValue</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Decrement
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Increment
</UL>

<P><STRONG><a name="[e4]"></a>PcdRestore</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1BakValue
</UL>

<P><STRONG><a name="[e5]"></a>PcdTransfer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1BakValue
</UL>

<P><STRONG><a name="[e6]"></a>UL_PcdAnticoll</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdAnticoll
</UL>

<P><STRONG><a name="[e7]"></a>UL_PcdWrite</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdWrite
</UL>

<P><STRONG><a name="[e8]"></a>MifareProRst</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTypeARst
</UL>

<P><STRONG><a name="[e9]"></a>ISO14443CLCom</STRONG> (Thumb, 646 bytes, Stack size 88 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTCLCOS
</UL>

<P><STRONG><a name="[ea]"></a>CL_Deselect</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComCL_Deselect
</UL>

<P><STRONG><a name="[eb]"></a>PcdReadE2</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
</UL>

<P><STRONG><a name="[ec]"></a>PcdWriteE2</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdConfigRestore
</UL>

<P><STRONG><a name="[ed]"></a>PcdLoadConfig</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
</UL>

<P><STRONG><a name="[ee]"></a>PcdConfigRestore</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteE2
</UL>

<P><STRONG><a name="[f0]"></a>PcdLoadKeyE2</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
</UL>

<P><STRONG><a name="[f1]"></a>PcdRATS</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectApplication
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelectApplication
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[f3]"></a>PcdPPS</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectApplication
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelectApplication
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[f4]"></a>PcdSelectApplication</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectApplication
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelectApplication
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[f7]"></a>PcdSelectCCfile</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCCfile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadCCfile
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[f9]"></a>PcdReadCCfileLength</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCCfile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadCCfile
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[fb]"></a>PcdReadCCfile</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCCfile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadCCfile
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[fc]"></a>PcdSelectNDEFfile</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNDEFfile
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNDEFfile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[fe]"></a>PcdReadNDEFfileLength</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNDEFfile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[ff]"></a>PcdReadNDEFfile</STRONG> (Thumb, 116 bytes, Stack size 280 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNDEFfile
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[100]"></a>PcdWriteNDEFfile</STRONG> (Thumb, 130 bytes, Stack size 288 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[102]"></a>PcdSelectSystemfile</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemfile
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInterrupt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[104]"></a>PcdReadSystemfileLength</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemfile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[105]"></a>PcdReadSystemfile</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemfile
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInterrupt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[106]"></a>PcdSendInterrupt</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendInterrupt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInterrupt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[108]"></a>PcdDeselect</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDeselect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[109]"></a>PcdFWTExtension</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, mfrc500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSetTmo
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
</UL>

<P><STRONG><a name="[f5]"></a>M24SR_InitStructure</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
</UL>

<P><STRONG><a name="[10b]"></a>M24SR_UpdateCrc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>

<P><STRONG><a name="[f2]"></a>M24SR_ComputeCrc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
</UL>

<P><STRONG><a name="[10c]"></a>M24SR_BuildIBlockCommand</STRONG> (Thumb, 274 bytes, Stack size 44 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendInterrupt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>

<P><STRONG><a name="[f6]"></a>M24SR_SelectApplication</STRONG> (Thumb, 132 bytes, Stack size 544 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
</UL>

<P><STRONG><a name="[f8]"></a>M24SR_SelectCCfile</STRONG> (Thumb, 98 bytes, Stack size 528 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
</UL>

<P><STRONG><a name="[103]"></a>M24SR_SelectSystemfile</STRONG> (Thumb, 98 bytes, Stack size 528 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
</UL>

<P><STRONG><a name="[fd]"></a>M24SR_SelectNDEFfile</STRONG> (Thumb, 96 bytes, Stack size 528 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
</UL>

<P><STRONG><a name="[fa]"></a>M24SR_ReadBinary</STRONG> (Thumb, 80 bytes, Stack size 528 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
</UL>

<P><STRONG><a name="[101]"></a>M24SR_UpdateBinary</STRONG> (Thumb, 136 bytes, Stack size 536 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
</UL>

<P><STRONG><a name="[107]"></a>M24SR_SendInterrupt</STRONG> (Thumb, 78 bytes, Stack size 520 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
</UL>

<P><STRONG><a name="[10a]"></a>M24SR_FWTExtension</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
</UL>

<P><STRONG><a name="[10d]"></a>M24SR_IsCorrectCRC16Residue</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, m24sr_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_clr_rx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 970 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_clr_rx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_clr_tx
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI9_5_IRQHandler &rArr; hal_nrf_read_multibyte_reg &rArr; hal_nrf_read_rx_payload_width &rArr; hal_nrf_read_reg &rArr; hal_nrf_rw
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_read_multibyte_reg
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_irq_flags
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_get_clear_irq_flags
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_tx
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_nrf_flush_rx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24AddtoAck
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledToggle
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_uid_in_white_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>pos_handle_layer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pos_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pos_handle_layer &rArr; send_to_pos &rArr; app_debuglog_dump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_pos
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_from_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>App_returnErr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_returnErr &rArr; XOR_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[119]"></a>uidcmp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_handle_layer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_uid_from_white_list
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_uid_to_white_list
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_uid_in_white_list
</UL>

<P><STRONG><a name="[113]"></a>search_uid_in_white_list</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_uid_in_white_list
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uidcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>insert_uid_to_white_list</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = insert_uid_to_white_list
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uidcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[11b]"></a>App_returnMatchSwitchState</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_returnMatchSwitchState &rArr; XOR_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[11c]"></a>initialize_white_list</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initialize_white_list
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[11d]"></a>App_returnAttendanceSwitchState</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_returnAttendanceSwitchState &rArr; XOR_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[11e]"></a>App_returnWhiteListSwitchState</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_returnWhiteListSwitchState &rArr; XOR_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[11f]"></a>App_returnInitializeState</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_returnInitializeState &rArr; XOR_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[120]"></a>App_returnDeleteState</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_returnDeleteState &rArr; XOR_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[121]"></a>delete_uid_from_white_list</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delete_uid_from_white_list
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uidcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[122]"></a>App_returnInsertState</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_returnInsertState &rArr; XOR_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[123]"></a>clear_white_list_tx_flag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_handle_layer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[54]"></a>app_handle_layer</STRONG> (Thumb, 2438 bytes, Stack size 16 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_handle_layer &rArr; FindICCard &rArr; PcdSelect2 &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_white_list_tx_flag
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnInsertState
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_uid_from_white_list
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnDeleteState
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnInitializeState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnWhiteListSwitchState
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnAttendanceSwitchState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_white_list
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnMatchSwitchState
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_uid_to_white_list
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_returnErr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzze_Control
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_uid_in_white_list
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>AnswerErr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHlta
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAuthentication
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Initval
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Readval
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Decrement
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Increment
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1BakValue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdAnticoll
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdWrite
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTypeARst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTCLCOS
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComCL_Deselect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelectApplication
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadCCfile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDeselect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[126]"></a>AnswerOk</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect2
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Readval
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdAnticoll
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTypeARst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTCLCOS
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelectApplication
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadCCfile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDeselect
</UL>

<P><STRONG><a name="[127]"></a>ComDeselect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[128]"></a>ForceReadCCfile</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNDEFfile
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNDEFfile
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemfile
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInterrupt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
</UL>

<P><STRONG><a name="[129]"></a>ComReadSystemfile</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[12a]"></a>ComReadCCfile</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[12b]"></a>ComWriteNDEFfile</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[12c]"></a>ComReadNDEFfile</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[12d]"></a>ComSendInterrupt</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[12e]"></a>ComSelectApplication</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[12f]"></a>AnswerCommandOk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdAntenna
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHlta
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAuthentication
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Initval
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Decrement
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Increment
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1BakValue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdWrite
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComCL_Deselect
</UL>

<P><STRONG><a name="[130]"></a>ComCL_Deselect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[131]"></a>ComTCLCOS</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443CLCom
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[132]"></a>ComTypeARst</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareProRst
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[133]"></a>ComUL_PcdWrite</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[134]"></a>ComUL_PcdAnticoll</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[135]"></a>ComM1BakValue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[136]"></a>ComM1Increment</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[137]"></a>ComM1Decrement</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[138]"></a>ComM1Readval</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[139]"></a>ComM1Initval</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[13a]"></a>ComM1Write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[13b]"></a>ComM1Read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[13c]"></a>ComAuthentication</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthKey
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeCodeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[13e]"></a>ComHlta</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[13f]"></a>ComSelect2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[140]"></a>ComAnticol2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[141]"></a>ComSelect1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[142]"></a>ComAnticoll</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[143]"></a>ComPcdFindCard</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[144]"></a>ComPcdAntenna</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCommandOk
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[145]"></a>ComRequestA</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[147]"></a>rc500_handle_layer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
</UL>

<P><STRONG><a name="[148]"></a>Deselect</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_RF_config
</UL>

<P><STRONG><a name="[149]"></a>SelectApplication</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_RF_config
</UL>

<P><STRONG><a name="[124]"></a>FindICCard</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FindICCard &rArr; PcdSelect2 &rArr; PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_RF_config
</UL>

<P><STRONG><a name="[14a]"></a>write_RF_config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debuglog_dump
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectApplication
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
</UL>

<P><STRONG><a name="[14b]"></a>SendInterrupt</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
</UL>

<P><STRONG><a name="[14c]"></a>ReadCCfile</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
</UL>

<P><STRONG><a name="[14d]"></a>ReadSystemfile</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
</UL>

<P><STRONG><a name="[14e]"></a>ReadNDEFfile</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
</UL>

<P><STRONG><a name="[14f]"></a>WriteNDEFfile</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debuglog_dump
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrUartSendTask
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNDEFfile
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemfile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCCfile
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerOk
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_from_pos
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendInterrupt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443CLCom
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareProRst
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdConfigRestore
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_clr_tx
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNDEFfile
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadNDEFfile
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSystemfile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCCfile
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendInterrupt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectApplication
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deselect
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRequestA
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelectApplication
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadCCfile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceReadCCfile
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDeselect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoRC500
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindICCard
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_white_list
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ac]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ad]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ae]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1af]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[79]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf24InitConf_NRF1
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debuglog_dump_no_space
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debuglog_dump
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Module_Set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_RF_config
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3b]"></a>SetSysClockTo72</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClockTo72 &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[46]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72 &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d4]"></a>SetBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComTransceive
</UL>

<P><STRONG><a name="[d5]"></a>ClearBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ClearBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdAnticoll
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>

<P><STRONG><a name="[d6]"></a>PcdSetTmo</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PcdSetTmo &rArr; WriteRC
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_Deselect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443CLCom
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareProRst
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdAnticoll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRestore
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthKey
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>

<P><STRONG><a name="[d7]"></a>PcdComTransceive</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, mfrc500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PcdComTransceive &rArr; SetBitMask &rArr; ReadRC &rArr; MFRC500_DATA_Port_config_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRC
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdFWTExtension
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdLoadKeyE2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdLoadConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteE2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadE2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CL_Deselect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443CLCom
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MifareProRst
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdWrite
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UL_PcdAnticoll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdTransfer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRestore
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthKey
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect1
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>

<P><STRONG><a name="[115]"></a>receive_from_pos</STRONG> (Thumb, 786 bytes, Stack size 8 bytes, pos_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = receive_from_pos
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_clr_rx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_handle_layer
</UL>

<P><STRONG><a name="[116]"></a>send_to_pos</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pos_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_to_pos &rArr; app_debuglog_dump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debuglog_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_handle_layer
</UL>

<P><STRONG><a name="[117]"></a>Buzze_Control</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_handle_layer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buzze_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handle_layer
</UL>

<P><STRONG><a name="[146]"></a>sendtoRC500</STRONG> (Thumb, 1002 bytes, Stack size 24 bytes, rc500_handle_layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComRequestA
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdAntenna
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComPcdFindCard
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAnticoll
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAnticol2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelect2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComHlta
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComAuthentication
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Initval
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Readval
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Decrement
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1Increment
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComM1BakValue
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdAnticoll
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComUL_PcdWrite
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTypeARst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTCLCOS
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComCL_Deselect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSelectApplication
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComSendInterrupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadNDEFfile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComWriteNDEFfile
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadCCfile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComReadSystemfile
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDeselect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdDeselect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSendInterrupt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadSystemfileLength
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectSystemfile
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWriteNDEFfile
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadNDEFfileLength
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectNDEFfile
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfile
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReadCCfileLength
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectCCfile
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelectApplication
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdPPS
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRATS
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc500_handle_layer
</UL>

<P><STRONG><a name="[157]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[159]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[158]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
