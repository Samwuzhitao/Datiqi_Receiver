<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\drl51822project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\drl51822project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Jan 10 17:32:26 2017
<BR><P>
<H3>Maximum Stack Usage =        788 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; NFC_init &rArr; TT4_Init &rArr; M24SR_Initialization &rArr; M24SR_Init &rArr; M24SR_ManageI2CGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[14]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[85]">__asm___5_rtc_c_RTC__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">__asm___5_rtc_c_RTC__nrf_delay_us</a><BR>
 <LI><a href="#[87]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[87]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[83]">__asm___5_iic_c_I2C_Init__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">__asm___5_iic_c_I2C_Init__nrf_delay_us</a><BR>
 <LI><a href="#[82]">__asm___5_nfc_c_f447fc5b__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">__asm___5_nfc_c_f447fc5b__nrf_delay_us</a><BR>
 <LI><a href="#[86]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
 <LI><a href="#[84]">__asm___5_lcd_c_LCD_RAM__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84]">__asm___5_lcd_c_LCD_RAM__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC_IRQHandler</a> from nrf_drv_adc.o(i.ADC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[27]">HFCLK_start</a> from clock.o(i.HFCLK_start) referenced from clock.o(i.CLOCK_init)
 <LI><a href="#[28]">HFCLK_stop</a> from clock.o(i.HFCLK_stop) referenced from clock.o(i.CLOCK_init)
 <LI><a href="#[2]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2c]">Key_scan</a> from key.o(i.Key_scan) referenced from key.o(i.KEY_init)
 <LI><a href="#[3c]">LCD_clear_segment</a> from lcd.o(i.LCD_clear_segment) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[34]">LCD_diplay_battery_level</a> from lcd.o(i.LCD_diplay_battery_level) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[38]">LCD_diplay_letter</a> from lcd.o(i.LCD_diplay_letter) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[31]">LCD_diplay_off</a> from lcd.o(i.LCD_diplay_off) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[30]">LCD_diplay_on</a> from lcd.o(i.LCD_diplay_on) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[37]">LCD_diplay_signal</a> from lcd.o(i.LCD_diplay_signal) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[3b]">LCD_display_grade_value</a> from lcd.o(i.LCD_display_grade_value) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[35]">LCD_display_ok_failure</a> from lcd.o(i.LCD_display_ok_failure) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[3a]">LCD_display_question_num</a> from lcd.o(i.LCD_display_question_num) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[32]">LCD_display_sleep</a> from lcd.o(i.LCD_display_sleep) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[39]">LCD_display_student_id</a> from lcd.o(i.LCD_display_student_id) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[36]">LCD_display_true_false</a> from lcd.o(i.LCD_display_true_false) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[2f]">LCD_display_update</a> from lcd.o(i.LCD_display_update) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[33]">LCD_display_wakeup</a> from lcd.o(i.LCD_display_wakeup) referenced from lcd.o(i.LCD_init)
 <LI><a href="#[29]">LFCLK_start</a> from clock.o(i.LFCLK_start) referenced from clock.o(i.CLOCK_init)
 <LI><a href="#[2a]">LFCLK_stop</a> from clock.o(i.LFCLK_stop) referenced from clock.o(i.CLOCK_init)
 <LI><a href="#[18]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">RADIO_IRQHandler</a> from nrf_esb.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2b]">RTC_calibrate</a> from clock.o(i.RTC_calibrate) referenced from clock.o(i.CLOCK_init)
 <LI><a href="#[4f]">RTC_calibrate_handler</a> from clock.o(i.RTC_calibrate_handler) referenced from clock.o(i.RTC_calibrate)
 <LI><a href="#[4f]">RTC_calibrate_handler</a> from clock.o(i.RTC_calibrate_handler) referenced from clock.o(i.RTC_calibrate_handler)
 <LI><a href="#[4c]">RTC_display_date</a> from rtc.o(i.RTC_display_date) referenced from rtc.o(i.RTC_Init)
 <LI><a href="#[4b]">RTC_display_time</a> from rtc.o(i.RTC_display_time) referenced from rtc.o(i.RTC_Init)
 <LI><a href="#[4d]">RTC_display_update</a> from rtc.o(i.RTC_display_update) referenced from rtc.o(i.RTC_Init)
 <LI><a href="#[4a]">RTC_sleep</a> from rtc.o(i.RTC_sleep) referenced from rtc.o(i.RTC_Init)
 <LI><a href="#[49]">RTC_wakeup</a> from rtc.o(i.RTC_wakeup) referenced from rtc.o(i.RTC_Init)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">SWI0_IRQHandler</a> from nrf_esb.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI1_IRQHandler</a> from app_timer.o(i.SWI1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[11]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">UART0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[22]">adc_event_handler</a> from adc.o(i.adc_event_handler) referenced from adc.o(i.ADC_init)
 <LI><a href="#[23]">adc_start_sample</a> from adc.o(i.adc_start_sample) referenced from adc.o(i.ADC_init)
 <LI><a href="#[24]">adc_update</a> from adc.o(i.adc_update) referenced from adc.o(i.ADC_init)
 <LI><a href="#[76]">button_event_handler</a> from key.o(i.button_event_handler) referenced from key.o(i.key_button_init)
 <LI><a href="#[26]">button_handler</a> from application.o(i.button_handler) referenced from application.o(i.APP_init)
 <LI><a href="#[58]">button_timer_handler</a> from timer.o(i.button_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[6e]">button_timer_start</a> from timer.o(i.button_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[6f]">button_timer_stop</a> from timer.o(i.button_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[77]">clock_calibration_hf_started</a> from nrf_drv_clock.o(i.clock_calibration_hf_started) referenced from nrf_drv_clock.o(i.nrf_drv_clock_calibration_start)
 <LI><a href="#[25]">command_handler</a> from application.o(i.command_handler) referenced from application.o(i.APP_init)
 <LI><a href="#[2e]">key_sleep</a> from key.o(i.key_sleep) referenced from key.o(i.KEY_init)
 <LI><a href="#[2d]">key_wakeup</a> from key.o(i.key_wakeup) referenced from key.o(i.KEY_init)
 <LI><a href="#[54]">lcd_update_timer_handler</a> from timer.o(i.lcd_update_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[66]">lcd_update_timer_start</a> from timer.o(i.lcd_update_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[67]">lcd_update_timer_stop</a> from timer.o(i.lcd_update_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[5c]">m_timer_event_handler</a> from timer.o(i.m_timer_event_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[45]">my_nrf_return_ack</a> from radio.o(i.my_nrf_return_ack) referenced from radio.o(i.RADIO_init)
 <LI><a href="#[46]">my_nrf_rx_success_handler</a> from radio.o(i.my_nrf_rx_success_handler) referenced from radio.o(i.RADIO_init)
 <LI><a href="#[48]">my_nrf_tx_failed_handler</a> from radio.o(i.my_nrf_tx_failed_handler) referenced from radio.o(i.RADIO_init)
 <LI><a href="#[47]">my_nrf_tx_success_handler</a> from radio.o(i.my_nrf_tx_success_handler) referenced from radio.o(i.RADIO_init)
 <LI><a href="#[7c]">nrf_esb_event_handler</a> from radio.o(i.nrf_esb_event_handler) referenced from radio.o(i.radio_config)
 <LI><a href="#[44]">nrf_rx_data_handler</a> from radio.o(i.nrf_rx_data_handler) referenced from radio.o(i.RADIO_init)
 <LI><a href="#[78]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.nrf_esb_start_rx)
 <LI><a href="#[78]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.on_radio_disabled_rx_ack)
 <LI><a href="#[79]">on_radio_disabled_rx_ack</a> from nrf_esb.o(i.on_radio_disabled_rx_ack) referenced from nrf_esb.o(i.on_radio_disabled_rx)
 <LI><a href="#[7b]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
 <LI><a href="#[7b]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[7d]">on_radio_disabled_tx_noack</a> from nrf_esb.o(i.on_radio_disabled_tx_noack) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[7a]">on_radio_disabled_tx_wait_for_ack</a> from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack) referenced from nrf_esb.o(i.on_radio_disabled_tx)
 <LI><a href="#[3d]">power_off</a> from power.o(i.power_off) referenced from power.o(i.POWER_init)
 <LI><a href="#[3e]">power_on</a> from power.o(i.power_on) referenced from power.o(i.POWER_init)
 <LI><a href="#[3f]">power_sleep</a> from power.o(i.power_sleep) referenced from power.o(i.POWER_init)
 <LI><a href="#[40]">power_wakeup</a> from power.o(i.power_wakeup) referenced from power.o(i.POWER_init)
 <LI><a href="#[57]">powerdown_timer_handler</a> from timer.o(i.powerdown_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[6c]">powerdown_timer_start</a> from timer.o(i.powerdown_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[6d]">powerdown_timer_stop</a> from timer.o(i.powerdown_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[43]">radio_sleep</a> from radio.o(i.radio_sleep) referenced from radio.o(i.RADIO_init)
 <LI><a href="#[42]">radio_wakeup</a> from radio.o(i.radio_wakeup) referenced from radio.o(i.RADIO_init)
 <LI><a href="#[4e]">read_rtc_data</a> from rtc.o(i.read_rtc_data) referenced from rtc.o(i.RTC_Init)
 <LI><a href="#[59]">request_data_timer_handler</a> from timer.o(i.request_data_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[70]">request_data_timer_start</a> from timer.o(i.request_data_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[71]">request_data_timer_stop</a> from timer.o(i.request_data_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[55]">retransmit_timer_handler</a> from timer.o(i.retransmit_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[68]">retransmit_timer_start</a> from timer.o(i.retransmit_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[69]">retransmit_timer_stop</a> from timer.o(i.retransmit_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[51]">return_ack_timer_handler</a> from timer.o(i.return_ack_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[5f]">return_ack_timer_start</a> from timer.o(i.return_ack_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[60]">return_ack_timer_stop</a> from timer.o(i.return_ack_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[63]">rx_window_timer_add</a> from timer.o(i.rx_window_timer_add) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[52]">rx_window_timer_handler</a> from timer.o(i.rx_window_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[61]">rx_window_timer_start</a> from timer.o(i.rx_window_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[62]">rx_window_timer_stop</a> from timer.o(i.rx_window_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[41]">send_system_state</a> from power.o(i.send_system_state) referenced from power.o(i.POWER_init)
 <LI><a href="#[5a]">system_off_timer_handler</a> from timer.o(i.system_off_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[72]">system_off_timer_start</a> from timer.o(i.system_off_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[73]">system_off_timer_stop</a> from timer.o(i.system_off_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[50]">temp_timer_handler</a> from timer.o(i.temp_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[5d]">temp_timer_start</a> from timer.o(i.temp_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[5e]">temp_timer_stop</a> from timer.o(i.temp_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[56]">transmit_result_timer_handler</a> from timer.o(i.transmit_result_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[6a]">transmit_result_timer_start</a> from timer.o(i.transmit_result_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[6b]">transmit_result_timer_stop</a> from timer.o(i.transmit_result_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[53]">tx_overtime_timer_handler</a> from timer.o(i.tx_overtime_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[64]">tx_overtime_timer_start</a> from timer.o(i.tx_overtime_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[65]">tx_overtime_timer_stop</a> from timer.o(i.tx_overtime_timer_stop) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[7f]">update_rf_payload_format_esb</a> from nrf_esb.o(i.update_rf_payload_format_esb) referenced from nrf_esb.o(i.update_radio_protocol)
 <LI><a href="#[7e]">update_rf_payload_format_esb_dpl</a> from nrf_esb.o(i.update_rf_payload_format_esb_dpl) referenced from nrf_esb.o(i.update_radio_protocol)
 <LI><a href="#[5b]">wait_data_timer_handler</a> from timer.o(i.wait_data_timer_handler) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[74]">wait_data_timer_start</a> from timer.o(i.wait_data_timer_start) referenced from timer.o(i.TIMER_init)
 <LI><a href="#[75]">wait_data_timer_stop</a> from timer.o(i.wait_data_timer_stop) referenced from timer.o(i.TIMER_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[80]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[195]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[196]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[197]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[198]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[199]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[82]"></a>__asm___5_nfc_c_f447fc5b__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nfc.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_nfc_c_f447fc5b__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_nfc_c_f447fc5b__nrf_delay_us
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[83]"></a>__asm___5_iic_c_I2C_Init__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, iic.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>

<P><STRONG><a name="[84]"></a>__asm___5_lcd_c_LCD_RAM__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_lcd_c_LCD_RAM__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_lcd_c_LCD_RAM__nrf_delay_us
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_wakeup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[85]"></a>__asm___5_rtc_c_RTC__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtc.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Ack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check_Ack
</UL>

<P><STRONG><a name="[86]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[87]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_next_question_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_command_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rx_data_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_student_id
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_question_num
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_grade_value
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_add
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_system_state
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_question_info
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_question_command_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_send_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_return_ack_timer_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_start_transmit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rx_data_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_rx_success_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_return_ack
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_config
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_question_command_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>ADC_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>ADC_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adc.o(i.ADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_init &rArr; nrf_drv_adc_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_channel_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>APP_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, application.o(i.APP_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>CLOCK_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, clock.o(i.CLOCK_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_init &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>Check_Ack</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, iic.o(i.Check_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[b]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>GPIO_default</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, define.o(i.GPIO_default))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>

<P><STRONG><a name="[a7]"></a>I2C_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, iic.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[a8]"></a>I2C_Start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iic.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[a9]"></a>I2C_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iic.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[aa]"></a>KEY_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, key.o(i.KEY_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = KEY_init &rArr; key_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_input
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_wakeup
</UL>

<P><STRONG><a name="[fe]"></a>LCD_clear_dot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i.LCD_clear_dot))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutual_vote_command_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_question_command_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_grade_command_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_end_command_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_display_time
</UL>

<P><STRONG><a name="[3c]"></a>LCD_clear_segment</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lcd.o(i.LCD_clear_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_clear_segment &rArr; modify_segment &rArr; modify_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_segment
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[fd]"></a>LCD_diplay_dot</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i.LCD_diplay_dot))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_display_time
</UL>

<P><STRONG><a name="[b5]"></a>LCD_diplay_segment</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lcd.o(i.LCD_diplay_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_diplay_segment &rArr; modify_segment &rArr; modify_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_segment
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_display_time
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_student_id
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_question_num
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_grade_value
</UL>

<P><STRONG><a name="[3b]"></a>LCD_display_grade_value</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd.o(i.LCD_display_grade_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_display_grade_value &rArr; LCD_diplay_segment &rArr; modify_segment &rArr; modify_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_segment
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[3a]"></a>LCD_display_question_num</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd.o(i.LCD_display_question_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_display_question_num &rArr; LCD_diplay_segment &rArr; modify_segment &rArr; modify_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_segment
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[39]"></a>LCD_display_student_id</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lcd.o(i.LCD_display_student_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_display_student_id &rArr; LCD_diplay_segment &rArr; modify_segment &rArr; modify_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_segment
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[ba]"></a>LCD_init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, lcd.o(i.LCD_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_init &rArr; LCD_write_mult_data &rArr; LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_lcd_c_LCD_RAM__nrf_delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_mult_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>M24SR_BuildIBlockCommand</STRONG> (Thumb, 304 bytes, Stack size 44 bytes, m24sr_cmd.o(i.M24SR_BuildIBlockCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M24SR_BuildIBlockCommand &rArr; M24SR_ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>

<P><STRONG><a name="[c2]"></a>M24SR_CloseNDEFSession</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nfc.o(i.M24SR_CloseNDEFSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = M24SR_CloseNDEFSession &rArr; M24SR_Deselect &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadNDEF
</UL>

<P><STRONG><a name="[c1]"></a>M24SR_ComputeCrc</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, m24sr_cmd.o(i.M24SR_ComputeCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = M24SR_ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
</UL>

<P><STRONG><a name="[c3]"></a>M24SR_Deselect</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m24sr_cmd.o(i.M24SR_Deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = M24SR_Deselect &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[ca]"></a>M24SR_GetSession</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m24sr_cmd.o(i.M24SR_GetSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = M24SR_GetSession &rArr; M24SR_SendI2Ccommand &rArr; Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
</UL>

<P><STRONG><a name="[cb]"></a>M24SR_GetUID</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nfc.o(i.M24SR_GetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = M24SR_GetUID &rArr; M24SR_SelectApplication &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
</UL>

<P><STRONG><a name="[cf]"></a>M24SR_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nfc.o(i.M24SR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = M24SR_Init &rArr; M24SR_ManageI2CGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageI2CGPO
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_InitStructure
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[d0]"></a>M24SR_InitStructure</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, m24sr_cmd.o(i.M24SR_InitStructure))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[d3]"></a>M24SR_Initialization</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, nfc.o(i.M24SR_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = M24SR_Initialization &rArr; M24SR_Init &rArr; M24SR_ManageI2CGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
</UL>

<P><STRONG><a name="[c9]"></a>M24SR_IsCorrectCRC16Residue</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, m24sr_cmd.o(i.M24SR_IsCorrectCRC16Residue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = M24SR_IsCorrectCRC16Residue &rArr; M24SR_ComputeCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
</UL>

<P><STRONG><a name="[d1]"></a>M24SR_KillSession</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m24sr_cmd.o(i.M24SR_KillSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = M24SR_KillSession &rArr; M24SR_SendI2Ccommand &rArr; Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[d2]"></a>M24SR_ManageI2CGPO</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, nfc.o(i.M24SR_ManageI2CGPO))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = M24SR_ManageI2CGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Init
</UL>

<P><STRONG><a name="[d9]"></a>M24SR_ManageIICProtect</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nfc.o(i.M24SR_ManageIICProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = M24SR_ManageIICProtect &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
</UL>

<P><STRONG><a name="[da]"></a>M24SR_ManageRFGPO</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, nfc.o(i.M24SR_ManageRFGPO))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = M24SR_ManageRFGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
</UL>

<P><STRONG><a name="[db]"></a>M24SR_OpenNDEFSession</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, nfc.o(i.M24SR_OpenNDEFSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = M24SR_OpenNDEFSession &rArr; M24SR_SelectApplication &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadNDEF
</UL>

<P><STRONG><a name="[c6]"></a>M24SR_PollI2C</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nfc.o(i.M24SR_PollI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = M24SR_PollI2C &rArr; Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_nfc_c_f447fc5b__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
</UL>

<P><STRONG><a name="[ce]"></a>M24SR_ReadBinary</STRONG> (Thumb, 194 bytes, Stack size 560 bytes, m24sr_cmd.o(i.M24SR_ReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageRFGPO
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetUID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageI2CGPO
</UL>

<P><STRONG><a name="[d6]"></a>M24SR_ReadData</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nfc.o(i.M24SR_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadNDEF
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[c7]"></a>M24SR_ReceiveI2Cbuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nfc.o(i.M24SR_ReceiveI2Cbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
</UL>

<P><STRONG><a name="[cc]"></a>M24SR_SelectApplication</STRONG> (Thumb, 234 bytes, Stack size 568 bytes, m24sr_cmd.o(i.M24SR_SelectApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = M24SR_SelectApplication &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageRFGPO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageIICProtect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetUID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageI2CGPO
</UL>

<P><STRONG><a name="[d5]"></a>M24SR_SelectCCfile</STRONG> (Thumb, 204 bytes, Stack size 560 bytes, m24sr_cmd.o(i.M24SR_SelectCCfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = M24SR_SelectCCfile &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
</UL>

<P><STRONG><a name="[dc]"></a>M24SR_SelectNDEFfile</STRONG> (Thumb, 204 bytes, Stack size 560 bytes, m24sr_cmd.o(i.M24SR_SelectNDEFfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = M24SR_SelectNDEFfile &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
</UL>

<P><STRONG><a name="[cd]"></a>M24SR_SelectSystemfile</STRONG> (Thumb, 204 bytes, Stack size 560 bytes, m24sr_cmd.o(i.M24SR_SelectSystemfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = M24SR_SelectSystemfile &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageRFGPO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageIICProtect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetUID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageI2CGPO
</UL>

<P><STRONG><a name="[c5]"></a>M24SR_SendI2Ccommand</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nfc.o(i.M24SR_SendI2Ccommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = M24SR_SendI2Ccommand &rArr; Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Verify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectSystemfile
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectNDEFfile
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectCCfile
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SelectApplication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadBinary
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
</UL>

<P><STRONG><a name="[d8]"></a>M24SR_UpdateBinary</STRONG> (Thumb, 242 bytes, Stack size 568 bytes, m24sr_cmd.o(i.M24SR_UpdateBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_FWTExtension
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSBlock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageRFGPO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageIICProtect
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageI2CGPO
</UL>

<P><STRONG><a name="[c4]"></a>M24SR_UpdateCrc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, m24sr_cmd.o(i.M24SR_UpdateCrc))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>

<P><STRONG><a name="[d7]"></a>M24SR_Verify</STRONG> (Thumb, 280 bytes, Stack size 568 bytes, m24sr_cmd.o(i.M24SR_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = M24SR_Verify &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_BuildIBlockCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageRFGPO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageIICProtect
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageI2CGPO
</UL>

<P><STRONG><a name="[e2]"></a>NDEF_ReadNDEF</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nfc.o(i.NDEF_ReadNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = NDEF_ReadNDEF &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadNDEF
</UL>

<P><STRONG><a name="[e3]"></a>NFC_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nfc.o(i.NFC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = NFC_init &rArr; TT4_Init &rArr; M24SR_Initialization &rArr; M24SR_Init &rArr; M24SR_ManageI2CGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadNDEF
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>PARAMETER_init</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, define.o(i.PARAMETER_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>PARAMETER_update</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, define.o(i.PARAMETER_update))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[6]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_drv_clock_hfclk_request &rArr; hfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>POWER_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, power.o(i.POWER_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>RADIO_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_esb.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>RADIO_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, radio.o(i.RADIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RADIO_init &rArr; radio_config &rArr; nrf_esb_set_prefixes &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>RTC1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>RTC_Init</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RTC_Init &rArr; read_rtc_data &rArr; RTC_ReadNReg &rArr; RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteNReg
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>RTC_WriteNReg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rtc.o(i.RTC_WriteNReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RTC_WriteNReg &rArr; RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_command_handler
</UL>

<P><STRONG><a name="[4d]"></a>RTC_display_update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.RTC_display_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RTC_display_update &rArr; read_rtc_data &rArr; RTC_ReadNReg &rArr; RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_display_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.RTC_Init)
</UL>
<P><STRONG><a name="[df]"></a>ReadByte</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, iic.o(i.ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
</UL>

<P><STRONG><a name="[19]"></a>SWI0_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_esb.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI0_IRQHandler &rArr; nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI1_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>Send_Ack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, iic.o(i.Send_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_peripheral_domain_setup_needed
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>TIMER_init</STRONG> (Thumb, 650 bytes, Stack size 16 bytes, timer.o(i.TIMER_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIMER_init &rArr; app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>TT4_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nfc.o(i.TT4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = TT4_Init &rArr; M24SR_Initialization &rArr; M24SR_Init &rArr; M24SR_ManageI2CGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageRFGPO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageIICProtect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetUID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ManageI2CGPO
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_GetSession
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_init
</UL>

<P><STRONG><a name="[e5]"></a>TT4_ReadNDEF</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nfc.o(i.TT4_ReadNDEF))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = TT4_ReadNDEF &rArr; NDEF_ReadNDEF &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NDEF_ReadNDEF
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_CloseNDEFSession
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[dd]"></a>Write_Byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, iic.o(i.Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_iic_c_I2C_Init__nrf_delay_us
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
</UL>

<P><STRONG><a name="[144]"></a>XOR_Cal</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, define.o(i.XOR_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XOR_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_system_state
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_send_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_retransmit_timer_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rx_data_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_return_ack
</UL>

<P><STRONG><a name="[187]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, timer.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_add
</UL>

<P><STRONG><a name="[b6]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_segment
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_signal
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_segment
</UL>

<P><STRONG><a name="[1a3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10e]"></a>app_error_fault_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[96]"></a>app_error_handler_bare</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_stop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_overtime_timer_stop
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_overtime_timer_start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_result_timer_stop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_result_timer_start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_timer_stop
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_timer_start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_off_timer_stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_off_timer_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_stop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_add
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack_timer_stop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack_timer_start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_start
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data_timer_stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data_timer_start
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerdown_timer_stop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerdown_timer_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_timer_stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_timer_start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
</UL>

<P><STRONG><a name="[106]"></a>app_timer_create</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_init
</UL>

<P><STRONG><a name="[105]"></a>app_timer_init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_init
</UL>

<P><STRONG><a name="[115]"></a>app_timer_start</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_overtime_timer_start
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_result_timer_start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_timer_start
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_off_timer_start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_add
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack_timer_start
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data_timer_start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerdown_timer_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_timer_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_start
</UL>

<P><STRONG><a name="[118]"></a>app_timer_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_overtime_timer_stop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_result_timer_stop
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_timer_stop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_off_timer_stop
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_stop
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack_timer_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retransmit_timer_stop
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_data_timer_stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerdown_timer_stop
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_timer_stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_stop
</UL>

<P><STRONG><a name="[11a]"></a>app_util_critical_region_enter</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_abort
</UL>

<P><STRONG><a name="[11c]"></a>app_util_critical_region_exit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_abort
</UL>

<P><STRONG><a name="[11b]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[11d]"></a>app_util_enable_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[76]"></a>button_event_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, key.o(i.button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = button_event_handler &rArr; TT4_ReadNDEF &rArr; NDEF_ReadNDEF &rArr; M24SR_ReadData &rArr; M24SR_ReadBinary &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT4_ReadNDEF
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_KillSession
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Deselect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAMETER_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.key_button_init)
</UL>
<P><STRONG><a name="[186]"></a>get_random_number</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, define.o(i.get_random_number))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_ack_timer_start
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = main &rArr; NFC_init &rArr; TT4_Init &rArr; M24SR_Initialization &rArr; M24SR_Init &rArr; M24SR_ManageI2CGPO &rArr; M24SR_UpdateBinary &rArr; M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PARAMETER_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_default
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[151]"></a>my_esb_mode_change</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_esb.o(i.my_esb_mode_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_esb_mode_change
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_system_state
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_add
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_return_ack_timer_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_start_transmit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_return_ack
</UL>

<P><STRONG><a name="[45]"></a>my_nrf_return_ack</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, radio.o(i.my_nrf_return_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_nrf_return_ack &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringcmp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rx_data_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_init)
</UL>
<P><STRONG><a name="[46]"></a>my_nrf_rx_success_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, radio.o(i.my_nrf_rx_success_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_nrf_rx_success_handler &rArr; stringcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringcmp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_init)
</UL>
<P><STRONG><a name="[48]"></a>my_nrf_tx_failed_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(i.my_nrf_tx_failed_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_nrf_tx_failed_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_init)
</UL>
<P><STRONG><a name="[47]"></a>my_nrf_tx_success_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(i.my_nrf_tx_success_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_nrf_tx_success_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_init)
</UL>
<P><STRONG><a name="[d4]"></a>nrf_delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_OpenNDEFSession
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_Initialization
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>

<P><STRONG><a name="[10a]"></a>nrf_drv_adc_buffer_convert</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_adc_buffer_convert &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_check
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_sample
</UL>

<P><STRONG><a name="[97]"></a>nrf_drv_adc_channel_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[95]"></a>nrf_drv_adc_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_adc_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[10b]"></a>nrf_drv_adc_sample</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_sample))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_sample
</UL>

<P><STRONG><a name="[149]"></a>nrf_drv_clock_calibration_abort</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_calibration_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_clock_calibration_abort &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[fc]"></a>nrf_drv_clock_calibration_start</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_calibration_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_calibration_start &rArr; nrf_drv_clock_hfclk_request &rArr; hfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_calibrate_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_calibrate
</UL>

<P><STRONG><a name="[a6]"></a>nrf_drv_clock_hfclk_release</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_hfclk_release &rArr; hfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFCLK_stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_hf_started
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>nrf_drv_clock_hfclk_request</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_hfclk_request &rArr; hfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_start
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFCLK_start
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>nrf_drv_clock_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_init
</UL>

<P><STRONG><a name="[bf]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; lfclk_stop &rArr; nrf_drv_clock_calibration_abort &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFCLK_stop
</UL>

<P><STRONG><a name="[be]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; lfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LFCLK_start
</UL>

<P><STRONG><a name="[161]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[142]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
</UL>

<P><STRONG><a name="[141]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
</UL>

<P><STRONG><a name="[140]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
</UL>

<P><STRONG><a name="[16c]"></a>nrf_esb_disable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[7c]"></a>nrf_esb_event_handler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, radio.o(i.nrf_esb_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_event_handler &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.radio_config)
</UL>
<P><STRONG><a name="[152]"></a>nrf_esb_flush_tx</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_flush_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_flush_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_system_state
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_return_ack_timer_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_start_transmit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_return_ack
</UL>

<P><STRONG><a name="[ff]"></a>nrf_esb_get_clear_interrupts</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_get_clear_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_get_clear_interrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>nrf_esb_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_init &rArr; nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timer_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppi_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_config
</UL>

<P><STRONG><a name="[175]"></a>nrf_esb_read_rx_payload</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_read_rx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_read_rx_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rx_data_handler
</UL>

<P><STRONG><a name="[176]"></a>nrf_esb_set_base_address_0</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_set_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_esb_set_base_address_0 &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_config
</UL>

<P><STRONG><a name="[178]"></a>nrf_esb_set_prefixes</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_set_prefixes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_set_prefixes &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_config
</UL>

<P><STRONG><a name="[15c]"></a>nrf_esb_set_rf_channel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_set_rf_channel))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_config
</UL>

<P><STRONG><a name="[179]"></a>nrf_esb_start_rx</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_start_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_add
</UL>

<P><STRONG><a name="[15d]"></a>nrf_esb_stop_rx</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_stop_rx))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_window_timer_start
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_sleep
</UL>

<P><STRONG><a name="[153]"></a>nrf_esb_write_payload</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_write_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_system_state
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_return_ack_timer_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_start_transmit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_event_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_return_ack
</UL>

<P><STRONG><a name="[44]"></a>nrf_rx_data_handler</STRONG> (Thumb, 596 bytes, Stack size 48 bytes, radio.o(i.nrf_rx_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_rx_data_handler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stringcmp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_return_ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_init)
</UL>
<P><STRONG><a name="[145]"></a>nrf_start_transmit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, radio.o(i.nrf_start_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_start_transmit &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_send_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_retransmit_timer_handler
</UL>

<P><STRONG><a name="[15e]"></a>stringcmp</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, define.o(i.stringcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stringcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rx_data_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_rx_success_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_nrf_return_ack
</UL>

<P><STRONG><a name="[12b]"></a>test_command_handler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, application.o(i.test_command_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e1]"></a>IsSBlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m24sr_cmd.o(i.IsSBlock))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
</UL>

<P><STRONG><a name="[c8]"></a>M24SR_FWTExtension</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, m24sr_cmd.o(i.M24SR_FWTExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = M24SR_FWTExtension &rArr; M24SR_ReceiveI2Cbuffer &rArr; ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_SendI2Ccommand
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ReceiveI2Cbuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_PollI2C
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_IsCorrectCRC16Residue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_ComputeCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M24SR_UpdateBinary
</UL>

<P><STRONG><a name="[17d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, iic.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[9d]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, iic.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>

<P><STRONG><a name="[9f]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iic.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>

<P><STRONG><a name="[9b]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iic.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>

<P><STRONG><a name="[9e]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iic.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>

<P><STRONG><a name="[9c]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iic.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Ack
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Ack
</UL>

<P><STRONG><a name="[34]"></a>LCD_diplay_battery_level</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, lcd.o(i.LCD_diplay_battery_level))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[38]"></a>LCD_diplay_letter</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, lcd.o(i.LCD_diplay_letter))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[31]"></a>LCD_diplay_off</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcd.o(i.LCD_diplay_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_diplay_off &rArr; LCD_write_command &rArr; LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[30]"></a>LCD_diplay_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(i.LCD_diplay_on))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[37]"></a>LCD_diplay_signal</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, lcd.o(i.LCD_diplay_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_diplay_signal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[35]"></a>LCD_display_ok_failure</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lcd.o(i.LCD_display_ok_failure))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[32]"></a>LCD_display_sleep</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd.o(i.LCD_display_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_display_sleep &rArr; LCD_write_command &rArr; LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_command
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_gpio_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[36]"></a>LCD_display_true_false</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lcd.o(i.LCD_display_true_false))
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[2f]"></a>LCD_display_update</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcd.o(i.LCD_display_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_display_update &rArr; LCD_write_mult_data &rArr; LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_mult_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_gpio_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[33]"></a>LCD_display_wakeup</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lcd.o(i.LCD_display_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_display_wakeup &rArr; LCD_write_command &rArr; LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_lcd_c_LCD_RAM__nrf_delay_us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(i.LCD_init)
</UL>
<P><STRONG><a name="[b7]"></a>LCD_gpio_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i.LCD_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_gpio_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_update
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_sleep
</UL>

<P><STRONG><a name="[b2]"></a>LCD_write_command</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(i.LCD_write_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_write_command &rArr; LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_wakeup
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_sleep
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_off
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[bc]"></a>LCD_write_data</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lcd.o(i.LCD_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_mult_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_command
</UL>

<P><STRONG><a name="[b8]"></a>LCD_write_mult_data</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lcd.o(i.LCD_write_mult_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_write_mult_data &rArr; LCD_write_data &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[158]"></a>clear_ram</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.clear_ram))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_segment
</UL>

<P><STRONG><a name="[159]"></a>modify_ram</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, lcd.o(i.modify_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modify_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_segment
</UL>

<P><STRONG><a name="[b1]"></a>modify_segment</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, lcd.o(i.modify_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = modify_segment &rArr; modify_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ram
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ram
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_segment
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_segment
</UL>

<P><STRONG><a name="[17c]"></a>nrf_gpio_cfg</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, lcd.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[b9]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_gpio_config
</UL>

<P><STRONG><a name="[b3]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_gpio_config
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_wakeup
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_off
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[bb]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_mult_data
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_command
</UL>

<P><STRONG><a name="[b4]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_mult_data
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_data
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_command
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display_wakeup
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_off
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[bd]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_data
</UL>

<P><STRONG><a name="[ed]"></a>RTC_Check_Ack</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rtc.o(i.RTC_Check_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
</UL>

<P><STRONG><a name="[f3]"></a>RTC_I2C_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtc.o(i.RTC_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteNReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadNReg
</UL>

<P><STRONG><a name="[f4]"></a>RTC_I2C_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtc.o(i.RTC_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteNReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadNReg
</UL>

<P><STRONG><a name="[f8]"></a>RTC_ReadByte</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rtc.o(i.RTC_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RTC_ReadByte &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadNReg
</UL>

<P><STRONG><a name="[fa]"></a>RTC_ReadNReg</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, rtc.o(i.RTC_ReadNReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RTC_ReadNReg &rArr; RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[f9]"></a>RTC_Send_Ack</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtc.o(i.RTC_Send_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Send_Ack &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
</UL>

<P><STRONG><a name="[f6]"></a>RTC_WriteReg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtc.o(i.RTC_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RTC_WriteReg &rArr; RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[fb]"></a>RTC_Write_Byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtc.o(i.RTC_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_rtc_c_RTC__nrf_delay_us
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteNReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadNReg
</UL>

<P><STRONG><a name="[4c]"></a>RTC_display_date</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtc.o(i.RTC_display_date))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.RTC_Init)
</UL>
<P><STRONG><a name="[4b]"></a>RTC_display_time</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, rtc.o(i.RTC_display_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_display_time &rArr; LCD_diplay_segment &rArr; modify_segment &rArr; modify_ram
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_segment
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_diplay_dot
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_display_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.RTC_Init)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(i.RTC_sleep))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.RTC_Init)
</UL>
<P><STRONG><a name="[49]"></a>RTC_wakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(i.RTC_wakeup))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.RTC_Init)
</UL>
<P><STRONG><a name="[17e]"></a>nrf_gpio_cfg</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, rtc.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[f0]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rtc.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check_Ack
</UL>

<P><STRONG><a name="[f2]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtc.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Ack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check_Ack
</UL>

<P><STRONG><a name="[ee]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Ack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check_Ack
</UL>

<P><STRONG><a name="[f1]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check_Ack
</UL>

<P><STRONG><a name="[ef]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_Byte
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Ack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_I2C_Start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Check_Ack
</UL>

<P><STRONG><a name="[4e]"></a>read_rtc_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtc.o(i.read_rtc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = read_rtc_data &rArr; RTC_ReadNReg &rArr; RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadNReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_display_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.RTC_Init)
</UL>
<P><STRONG><a name="[2c]"></a>Key_scan</STRONG> (Thumb, 646 bytes, Stack size 16 bytes, key.o(i.Key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Key_scan &rArr; nrf_gpio_range_cfg_input &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_input
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_port_read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.KEY_init)
</UL>
<P><STRONG><a name="[ae]"></a>key_button_init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, key.o(i.key_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = key_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>

<P><STRONG><a name="[2e]"></a>key_sleep</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, key.o(i.key_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = key_sleep &rArr; nrf_gpio_range_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.KEY_init)
</UL>
<P><STRONG><a name="[2d]"></a>key_wakeup</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key.o(i.key_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = key_wakeup &rArr; KEY_init &rArr; key_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(i.KEY_init)
</UL>
<P><STRONG><a name="[17f]"></a>nrf_gpio_cfg</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, key.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[ac]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, key.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_input
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_button_init
</UL>

<P><STRONG><a name="[b0]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, key.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>

<P><STRONG><a name="[146]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, key.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sleep
</UL>

<P><STRONG><a name="[af]"></a>nrf_gpio_port_read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, key.o(i.nrf_gpio_port_read))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>

<P><STRONG><a name="[ad]"></a>nrf_gpio_range_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, key.o(i.nrf_gpio_range_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_gpio_range_cfg_input &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>

<P><STRONG><a name="[ab]"></a>nrf_gpio_range_cfg_output</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, key.o(i.nrf_gpio_range_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_range_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_sleep
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_scan
</UL>

<P><STRONG><a name="[eb]"></a>radio_config</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, radio.o(i.radio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = radio_config &rArr; nrf_esb_set_prefixes &rArr; update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_init
</UL>

<P><STRONG><a name="[43]"></a>radio_sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, radio.o(i.radio_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_init)
</UL>
<P><STRONG><a name="[42]"></a>radio_wakeup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, radio.o(i.radio_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = radio_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RADIO_init)
</UL>
<P><STRONG><a name="[22]"></a>adc_event_handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, adc.o(i.adc_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_event_handler &rArr; bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubbleSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.ADC_init)
</UL>
<P><STRONG><a name="[23]"></a>adc_start_sample</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(i.adc_start_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_start_sample &rArr; nrf_drv_adc_buffer_convert &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_sample
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.ADC_init)
</UL>
<P><STRONG><a name="[24]"></a>adc_update</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc.o(i.adc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.ADC_init)
</UL>
<P><STRONG><a name="[108]"></a>bubbleSort</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, adc.o(i.bubbleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_event_handler
</UL>

<P><STRONG><a name="[11e]"></a>swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.swap))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubbleSort
</UL>

<P><STRONG><a name="[58]"></a>button_timer_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.button_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[6e]"></a>button_timer_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(i.button_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = button_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[6f]"></a>button_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.button_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = button_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[54]"></a>lcd_update_timer_handler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, timer.o(i.lcd_update_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[66]"></a>lcd_update_timer_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(i.lcd_update_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lcd_update_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[67]"></a>lcd_update_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.lcd_update_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcd_update_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[14f]"></a>m_retransmit_timer_handler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, timer.o(i.m_retransmit_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m_retransmit_timer_handler &rArr; nrf_start_transmit &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_start_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_timer_event_handler
</UL>

<P><STRONG><a name="[150]"></a>m_return_ack_timer_handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timer.o(i.m_return_ack_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = m_return_ack_timer_handler &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_timer_event_handler
</UL>

<P><STRONG><a name="[5c]"></a>m_timer_event_handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, timer.o(i.m_timer_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_timer_event_handler &rArr; m_retransmit_timer_handler &rArr; nrf_start_transmit &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_return_ack_timer_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_retransmit_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[57]"></a>powerdown_timer_handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(i.powerdown_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = powerdown_timer_handler &rArr; powerdown_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerdown_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[6c]"></a>powerdown_timer_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.powerdown_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = powerdown_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[6d]"></a>powerdown_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.powerdown_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = powerdown_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerdown_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[59]"></a>request_data_timer_handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, timer.o(i.request_data_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = request_data_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[70]"></a>request_data_timer_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.request_data_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = request_data_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[71]"></a>request_data_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.request_data_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = request_data_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[55]"></a>retransmit_timer_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.retransmit_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[68]"></a>retransmit_timer_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(i.retransmit_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = retransmit_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[69]"></a>retransmit_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.retransmit_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = retransmit_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[51]"></a>return_ack_timer_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.return_ack_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = return_ack_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[5f]"></a>return_ack_timer_start</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, timer.o(i.return_ack_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = return_ack_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_random_number
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[60]"></a>return_ack_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.return_ack_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = return_ack_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[63]"></a>rx_window_timer_add</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, timer.o(i.rx_window_timer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rx_window_timer_add &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[52]"></a>rx_window_timer_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(i.rx_window_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_window_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[61]"></a>rx_window_timer_start</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, timer.o(i.rx_window_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rx_window_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[62]"></a>rx_window_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.rx_window_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_window_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[5a]"></a>system_off_timer_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.system_off_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_off_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[72]"></a>system_off_timer_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.system_off_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_off_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[73]"></a>system_off_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.system_off_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = system_off_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[50]"></a>temp_timer_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.temp_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[5d]"></a>temp_timer_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timer.o(i.temp_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = temp_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[5e]"></a>temp_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.temp_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = temp_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[56]"></a>transmit_result_timer_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.transmit_result_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = transmit_result_timer_handler &rArr; transmit_result_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_result_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[6a]"></a>transmit_result_timer_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.transmit_result_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = transmit_result_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[6b]"></a>transmit_result_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.transmit_result_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = transmit_result_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_result_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[53]"></a>tx_overtime_timer_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timer.o(i.tx_overtime_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_overtime_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[64]"></a>tx_overtime_timer_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timer.o(i.tx_overtime_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tx_overtime_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[65]"></a>tx_overtime_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.tx_overtime_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_overtime_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[5b]"></a>wait_data_timer_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.wait_data_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wait_data_timer_handler &rArr; wait_data_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[74]"></a>wait_data_timer_start</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timer.o(i.wait_data_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wait_data_timer_start &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[75]"></a>wait_data_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i.wait_data_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wait_data_timer_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_data_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.TIMER_init)
</UL>
<P><STRONG><a name="[107]"></a>activity_end_command_handler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, application.o(i.activity_end_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = activity_end_command_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[26]"></a>button_handler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, application.o(i.button_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = button_handler &rArr; key_send_handler &rArr; pack_question_info
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_send_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_next_question_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_letter_input_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_last_question_handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_judge_input_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_fn_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_digit_input_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_clear_handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.APP_init)
</UL>
<P><STRONG><a name="[25]"></a>command_handler</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, application.o(i.command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = command_handler &rArr; multiple_question_command_handler &rArr; fetch_question_info
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_command_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_off_command_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;student_id_match_command_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_answer_command_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_question_command_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_ok_command_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutual_vote_command_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_question_command_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeat_command_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_grade_command_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_packet_command_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activity_end_command_handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.APP_init)
</UL>
<P><STRONG><a name="[135]"></a>empty_packet_command_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i.empty_packet_command_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[15b]"></a>fetch_question_info</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, application.o(i.fetch_question_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fetch_question_info
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_question_command_handler
</UL>

<P><STRONG><a name="[131]"></a>group_grade_command_handler</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, application.o(i.group_grade_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = group_grade_command_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[133]"></a>heartbeat_command_handler</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, application.o(i.heartbeat_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = heartbeat_command_handler &rArr; RTC_WriteNReg &rArr; RTC_Write_Byte &rArr; RTC_Check_Ack &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteNReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[124]"></a>key_clear_handler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, application.o(i.key_clear_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_clear_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[121]"></a>key_digit_input_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, application.o(i.key_digit_input_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_digit_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[123]"></a>key_fn_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i.key_fn_handler))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[122]"></a>key_judge_input_handler</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, application.o(i.key_judge_input_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_judge_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[126]"></a>key_last_question_handler</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, application.o(i.key_last_question_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_last_question_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[120]"></a>key_letter_input_handler</STRONG> (Thumb, 468 bytes, Stack size 8 bytes, application.o(i.key_letter_input_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_letter_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[127]"></a>key_next_question_handler</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, application.o(i.key_next_question_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = key_next_question_handler &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[125]"></a>key_send_handler</STRONG> (Thumb, 484 bytes, Stack size 216 bytes, application.o(i.key_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = key_send_handler &rArr; pack_question_info
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_question_info
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_start_transmit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handler
</UL>

<P><STRONG><a name="[12d]"></a>multiple_question_command_handler</STRONG> (Thumb, 192 bytes, Stack size 216 bytes, application.o(i.multiple_question_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = multiple_question_command_handler &rArr; fetch_question_info
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_question_info
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_dot
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[12e]"></a>mutual_vote_command_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, application.o(i.mutual_vote_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutual_vote_command_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_clear_dot
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[143]"></a>pack_question_info</STRONG> (Thumb, 88 bytes, Stack size 224 bytes, application.o(i.pack_question_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pack_question_info
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_send_handler
</UL>

<P><STRONG><a name="[132]"></a>receive_ok_command_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i.receive_ok_command_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[12c]"></a>single_question_command_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, application.o(i.single_question_command_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[130]"></a>start_answer_command_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i.start_answer_command_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[134]"></a>student_id_match_command_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, application.o(i.student_id_match_command_handler))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[12f]"></a>sys_off_command_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, application.o(i.sys_off_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_off_command_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_handler
</UL>

<P><STRONG><a name="[185]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, power.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
</UL>

<P><STRONG><a name="[3d]"></a>power_off</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, power.o(i.power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = power_off &rArr; send_system_state &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_default
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_system_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(i.POWER_init)
</UL>
<P><STRONG><a name="[3e]"></a>power_on</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, power.o(i.power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = power_on &rArr; power_off &rArr; send_system_state &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(i.POWER_init)
</UL>
<P><STRONG><a name="[3f]"></a>power_sleep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, power.o(i.power_sleep))
<BR>[Address Reference Count : 1]<UL><LI> power.o(i.POWER_init)
</UL>
<P><STRONG><a name="[40]"></a>power_wakeup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power.o(i.power_wakeup))
<BR>[Address Reference Count : 1]<UL><LI> power.o(i.POWER_init)
</UL>
<P><STRONG><a name="[41]"></a>send_system_state</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, power.o(i.send_system_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_system_state &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_esb_mode_change
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XOR_Cal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(i.POWER_init)
</UL>
<P><STRONG><a name="[27]"></a>HFCLK_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, clock.o(i.HFCLK_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HFCLK_start &rArr; nrf_drv_clock_hfclk_request &rArr; hfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(i.CLOCK_init)
</UL>
<P><STRONG><a name="[28]"></a>HFCLK_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(i.HFCLK_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HFCLK_stop &rArr; nrf_drv_clock_hfclk_release &rArr; hfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(i.CLOCK_init)
</UL>
<P><STRONG><a name="[29]"></a>LFCLK_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, clock.o(i.LFCLK_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LFCLK_start &rArr; nrf_drv_clock_lfclk_request &rArr; lfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(i.CLOCK_init)
</UL>
<P><STRONG><a name="[2a]"></a>LFCLK_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(i.LFCLK_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LFCLK_stop &rArr; nrf_drv_clock_lfclk_release &rArr; lfclk_stop &rArr; nrf_drv_clock_calibration_abort &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(i.CLOCK_init)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_calibrate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clock.o(i.RTC_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_calibrate &rArr; nrf_drv_clock_calibration_start &rArr; nrf_drv_clock_hfclk_request &rArr; hfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clock.o(i.CLOCK_init)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_calibrate_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, clock.o(i.RTC_calibrate_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_calibrate_handler &rArr; nrf_drv_clock_calibration_start &rArr; nrf_drv_clock_hfclk_request &rArr; hfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> clock.o(i.RTC_calibrate)
<LI> clock.o(i.RTC_calibrate_handler)
</UL>
<P><STRONG><a name="[17a]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
</UL>

<P><STRONG><a name="[16d]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
</UL>

<P><STRONG><a name="[16e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_get_clear_interrupts
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
</UL>

<P><STRONG><a name="[183]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[174]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_esb.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[10c]"></a>addr_conv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_esb.o(i.addr_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>

<P><STRONG><a name="[10d]"></a>bytewise_bit_swap</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_esb.o(i.bytewise_bit_swap))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>

<P><STRONG><a name="[181]"></a>clear_events_restart_rx</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_esb.o(i.clear_events_restart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_events_restart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[13e]"></a>initialize_fifos</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_esb.o(i.initialize_fifos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initialize_fifos
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[78]"></a>on_radio_disabled_rx</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, nrf_esb.o(i.on_radio_disabled_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_radio_disabled_rx &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_events_restart_rx
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.nrf_esb_start_rx)
<LI> nrf_esb.o(i.on_radio_disabled_rx_ack)
</UL>
<P><STRONG><a name="[79]"></a>on_radio_disabled_rx_ack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_rx_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_rx_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_rx)
</UL>
<P><STRONG><a name="[7b]"></a>on_radio_disabled_tx</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_tx
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
<LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[7d]"></a>on_radio_disabled_tx_noack</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_noack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_radio_disabled_tx_noack &rArr; tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[7a]"></a>on_radio_disabled_tx_wait_for_ack</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_radio_disabled_tx_wait_for_ack &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_fifo_remove_last
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx)
</UL>
<P><STRONG><a name="[173]"></a>ppi_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, nrf_esb.o(i.ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[13f]"></a>reset_fifos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_esb.o(i.reset_fifos))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_fifos
</UL>

<P><STRONG><a name="[182]"></a>rx_fifo_push_rfbuf</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, nrf_esb.o(i.rx_fifo_push_rfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[17b]"></a>start_tx_transaction</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, nrf_esb.o(i.start_tx_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
</UL>

<P><STRONG><a name="[172]"></a>sys_timer_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_esb.o(i.sys_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[184]"></a>tx_fifo_remove_last</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.tx_fifo_remove_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_fifo_remove_last
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
</UL>

<P><STRONG><a name="[177]"></a>update_radio_addresses</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_radio_addresses &rArr; addr_conv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[190]"></a>update_radio_bitrate</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_bitrate))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[192]"></a>update_radio_crc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_crc))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[171]"></a>update_radio_parameters</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_radio_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_tx_power
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_protocol
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_crc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_bitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[191]"></a>update_radio_protocol</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[18f]"></a>update_radio_tx_power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[7f]"></a>update_rf_payload_format_esb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[7e]"></a>update_rf_payload_format_esb_dpl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb_dpl))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_protocol)
</UL>
<P><STRONG><a name="[110]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[112]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[18c]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[111]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[136]"></a>compare_reg_update</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[193]"></a>current_int_priority_get</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app_timer.o(i.current_int_priority_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
</UL>

<P><STRONG><a name="[189]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18a]"></a>expired_timers_handler</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[14b]"></a>list_deletions_handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[14d]"></a>list_insertions_handler</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[139]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[114]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[113]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[138]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[10f]"></a>rtc1_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[137]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[188]"></a>timeout_handler_exec</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timeout_handler_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[100]"></a>timer_list_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[14e]"></a>timer_list_insert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[14c]"></a>timer_list_remove</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[117]"></a>timer_start_op_schedule</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[119]"></a>timer_stop_op_schedule</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[ec]"></a>timer_timeouts_check</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[116]"></a>user_id_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_id_get &rArr; current_int_priority_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[18d]"></a>user_op_alloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[18e]"></a>user_op_enque</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[163]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_drv_common.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>

<P><STRONG><a name="[16b]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[a2]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>channel_port_alloc</STRONG> (Thumb, 116 bytes, Stack size 52 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[a3]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>nrf_gpio_cfg</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[a4]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[a1]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[167]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[164]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[165]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[16a]"></a>pin_in_use_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[93]"></a>adc_sample_process</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.adc_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>nrf_adc_config_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_config_set))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[160]"></a>nrf_adc_event_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[91]"></a>nrf_adc_event_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[92]"></a>nrf_adc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>nrf_adc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[77]"></a>clock_calibration_hf_started</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_calibration_hf_started))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_calibration_hf_started &rArr; nrf_drv_clock_hfclk_release &rArr; hfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_calibration_start)
</UL>
<P><STRONG><a name="[e9]"></a>clock_clk_started_notify</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>hfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.hfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[13c]"></a>hfclk_stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.hfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_hf_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>

<P><STRONG><a name="[12a]"></a>item_dequeue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[162]"></a>item_enqueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[147]"></a>lfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfclk_start
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[148]"></a>lfclk_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lfclk_stop &rArr; nrf_drv_clock_calibration_abort &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_lf_is_running
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[e6]"></a>nrf_clock_event_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>nrf_clock_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>nrf_clock_hf_is_running</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_hf_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
</UL>

<P><STRONG><a name="[e8]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_abort
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_hf_started
</UL>

<P><STRONG><a name="[14a]"></a>nrf_clock_lf_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_lf_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[129]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_calibration_hf_started
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_calibration_abort
</UL>

<P><STRONG><a name="[102]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[101]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[103]"></a>is_peripheral_domain_setup_needed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf51.o(i.is_peripheral_domain_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
